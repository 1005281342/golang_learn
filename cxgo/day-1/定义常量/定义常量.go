package 定义常量

import (
	"fmt"
	"unsafe"
)

const x int32 = 100
const s uintptr = unsafe.Sizeof(0)
const n int = len("abc")
const (
	a int = 1 * int(unsafe.Sizeof("abc"))
	b
)

/*
如指定常量类型，则左右类型必须一致。
必要时，可进行类型转换。
支持编译期能计算结果的表达式。
在常量组中，如不指定类型和初始化值，则与上行表达式相同。
*/
func main() {
	fmt.Println(x, s, n, a, b)
}

/*
原理：常量的本质
严格意义上来说，没有运行期常量的概念，常量会被直接展开到你需要用的地方，既然没有运行期常量，所以它没有地址，不能会对常量取地址。

换句话说，常量是数据，把数据放在某个地方才会有地址吧，那个地方有地址，也就是说虚拟空间有地址但数据本身没有地址。

变量是虚拟空间中真实给它分配一个地址空间的，这时候才会有地址。我把常量数据写到变量里面，你能说数据有地址么？
是变量有地址，变量代表的是某一段内存空间，所以它才会有地址。常量只是数据，数据你可以放到任何地方。数据本身没有地址，只有变量有地址。
常量因为需要展开，所以它是只读的。你可以把数据修改掉，但是原来数据本身并没有修改，只是用新的数据覆盖而已，你修改的变量并不是常量本身。

常量是数据，你在什么地方用就在什么地方展开，变量是地址空间，变量才会有地址，因为变量代表内存中某一段空间，
是虚拟存储空间里有一段空间，那段空间代表一个变量，我们给这段空间起个名字，因为接下来需要引用它，所以起个名字。

常量是数据，变量是地址空间。它俩根本不是同一个维度的
*/
